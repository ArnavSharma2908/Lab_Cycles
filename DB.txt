Experiment 1 
Create a table called Employee & execute the following.  
Employee (EMPNO, ENAME, JOB, MANAGER_NO, SAL, COMMISSION)  
1. Create a user and grant all permissions to the user.  
CREATE USER 'new_user'@'localhost' IDENTIFIED BY 'password';  
GRANT ALL PRIVILEGES ON *.* TO 'new_user'@'localhost';  
FLUSH PRIVILEGES;  
2. Insert any three records in the employee table containing attributes. EMPNO, 
ENAME JOB, MANAGER_NO, SAL, COMMISSION and use rollback. Check 
the result.  
BEGIN;  
INSERT INTO Employee (EMPNO, ENAME, JOB, MANAGER_NO, SAL,  
COMMISSION) VALUES  
(1, 'John Doe', 'Manager', NULL, 50000, 1000),  
(2, 'Jane Smith', 'Developer', 1, 40000, 500),  
(3, 'Alice Johnson', 'Analyst', 1, 45000, NULL);  
ROLLBACK;  
3. Add primary key constraint and not null constraint to the employee table.  
ALTER TABLE Employee  
ADD CONSTRAINT pk_Employee PRIMARY KEY (EMPNO),  
MODIFY ENAME VARCHAR(50) NOT NULL,  
MODIFY JOB VARCHAR(50) NOT NULL,  
MODIFY SAL DECIMAL(10,2) NOT NULL;  
4. Insert NULL values to the employee table and verify the result.  
INSERT INTO Employee (EMPNO, ENAME, JOB, MANAGER_NO, SAL, 
COMMISSION) VALUES (NULL, 'Test', NULL, NULL, NULL, NULL);  
Experiment 2 
Create a table called Employee that contains attributes EMPNO,ENAME,JOB, 
MGR,SAL and execute the following.  
1. Add a column commission with domain to the Employee table.  
ALTER TABLE Employee ADD COLUMN commission DECIMAL(10,2);  
2. Insert any five records into the table.  
INSERT INTO Employee (EMPNO, ENAME, JOB, MGR, SAL, commission)  
VALUES  
(101, 'John Doe', 'Manager', 100, 50000, NULL),  
(102, 'Jane Smith', 'Developer', 101, 40000, 1000),  
(103, 'Alice Johnson', 'Analyst', 101, 45000, 500),  
(104, 'Bob Brown', 'Designer', 102, 38000, NULL),  
(105, 'Charlie Wilson', 'Tester', 102, 35000, 800);  
3. Update the column details of job.  
UPDATE Employee  
SET job=concat('Senior ',job);  
4. Rename the column of Employ table using alter command.  
ALTER TABLE Employee  
CHANGE COLUMN Employ Employment VARCHAR(50);  
5. Delete the employee whose EMPNO is 105. DELETE FROM Employee 
WHERE EMPNO = 105;  
Experiment 3 
Queries using aggregate functions ( COUNT, AVG, MIN, MAX, SUM), Group by, 
Order by.  
Employee(E_id, E_name, Age, Salary)  
1. Create Employee table containing all Records E_id, E_name, Age, Salary.  
CREATE TABLE Employee (  
E_id INT PRIMARY KEY,  
E_name VARCHAR(50),  
Age INT,  
Salary DECIMAL(10, 2)  
);  
2. Count number of employee names from employee table.  
SELECT COUNT(E_name) AS total_employees FROM Employee;  
3. Find the Maximum age from the employee table.  
SELECT MAX(Age) AS max_age FROM Employee;  
4. Find the Minimum age from the employee table.  
SELECT MIN(Age) AS min_age FROM Employee;  
5. Find salaries of employees in Ascending Order.  
SELECT Salary FROM Employee ORDER BY Salary ASC;  
6. Find grouped salaries of employees.  
SELECT Salary, COUNT(*) AS num_employees FROM Employee GROUP 
BY Salary;  
Experiment 4 
Create a row level trigger for the customers table that would fire for INSERT or 
UPDATE or DELETE operations performed on the CUSTOMERS table. This trigger 
will display the salary difference between the old & new Salary.   
CUSTOMERS (ID, NAME, AGE, ADDRESS, SALARY)  
 
step1:create table salary_changes(e_id int, old_salary int, 
new_salary_int,salary_difference int); 
      create table employee(E_id int,E_name varchar(40),Age int,salary int); 
 
 
Setp 2: delimiter $$ 
        create trigger salary 
        after update on employee 
        for each row 
        begin 
        declare salary_difference int; 
        set salary_difference = New.salary-OLD.salary; 
        insert into salary_changes 
values(NEW.e_id,OLD.salary,NEW.salary,salary_difference); 
        end; 
       delimiter $$ 
 
step3: UPDATE emplo 
       SET salary = salary + 5000 
       WHERE e_id = 1; 
 
step4: select *from salary_changes; 
 
 
 
 
 
Experiment 5 
Create cursor for Employee table and extract the values from the table. Declare the 
variables, Open the cursor, and extract the values from the cursor. Close the 
cursor. Employee (E_id, E_name, Age, Salary) 
Step1: 
create table employee(E_id int,E_name varchar(50),Age int,Salary int); 
Step2: 
delimiter $$ 
create procedure procedure_name() 
begin 
DECLARE done INT DEFAULT 0; 
DECLARE v_E_id INT; 
DECLARE v_E_name VARCHAR(100); 
DECLARE v_Age INT; 
DECLARE v_Salary DECIMAL(10, 2); 
DECLARE employee_cursor CURSOR FOR 
SELECT E_id, E_name, Age, Salary 
FROM employee; 
DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 1; 
OPEN employee_cursor; 
read_loop: LOOP 
FETCH employee_cursor INTO v_E_id, v_E_name, v_Age, v_Salary; 
IF done THEN 
LEAVE read_loop; 
END IF; 
SELECT v_E_id AS Employee_ID, v_E_name AS Employee_Name, v_Age AS 
Age, v_Salary AS Salary; 
END LOOP; 
CLOSE employee_cursor; 
END; 
DELIMITER $$ 
step3: 
call procedure_name();