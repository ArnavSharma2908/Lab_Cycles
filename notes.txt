#Write a program to implement FIFO page replacement algorithm

AIM:

ALGORITHM:
Step 1: Initialize the queue and page position counter.
Step 2: Check if the new page is in memory.
Step 3: If present, it's a hit; if not, proceed to step 4.
Step 4: If memory is full, remove the oldest page and replace it with the new page.
Step 5: Add the new page to the end of the queue.
Step 6: Update page references and counters.
Step 7: Repeat for all page requests.

PROGRAM:

#include <stdio.h>

#define MAX_PAGES 50
#define MAX_FRAMES 10

int main() {
    int pages[MAX_PAGES], frames[MAX_FRAMES];
    int num_pages, num_frames;
    int i, j, k;
    int page_faults = 0;
    int is_page_in_memory;
    
    // Input number of pages
    printf("Enter the number of pages: ");
    scanf("%d", &num_pages);

    // Input page numbers
    printf("Enter the page numbers:\n");
    for (i = 0; i < num_pages; i++) {
        scanf("%d", &pages[i]);
    }

    // Input number of frames
    printf("Enter the number of frames: ");
    scanf("%d", &num_frames);

    // Initialize frame array to -1 (indicating empty)
for (i = 0; i < num_frames; i++) {
        frames[i] = -1;
    }

    // Print the header for the output
    printf("Ref String\tPage Frames\n");

    // Process each page
    for (i = 0; i < num_pages; i++) {
        printf("%d\t\t", pages[i]);
        is_page_in_memory = 0;

        // Check if the page is already in one of the frames
        for (k = 0; k < num_frames; k++) {
            if (frames[k] == pages[i]) {
                is_page_in_memory = 1;
                break;
            }
        }

        // If page is not in memory, replace the oldest page
        if (!is_page_in_memory) {
            frames[j] = pages[i];
            j = (j + 1) % num_frames;
            page_faults++;
        }

        // Print the current state of the frames
        for (k = 0; k < num_frames; k++) {
            printf("%d\t", frames[k]);
        }
        printf("\n");
    }

    // Output the total number of page faults
    printf("Total page faults: %d\n", page_faults);

    return 0;
}


