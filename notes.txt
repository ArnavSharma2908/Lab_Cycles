LRU
1.	Write a program to implement LRU page replacement algorithm

AIM:

ALGORITHM:

Begin the process.
Define the size parameters.
Input the number of pages to be processed.
Read the page values.
Initialize a counter and a stack.
Identify the least recently used page based on the counter.
Update the stack with the selected page.
Show the current values in the stack.
End the process.

PROGRAM:

#include <stdio.h>

#define MAX_PAGES 50
#define MAX_FRAMES 20

int main() {
    int referenceString[MAX_PAGES], frames[MAX_FRAMES];
    int pageFaults = 0, n, numFrames, i, j, k, leastUsedIndex, pageFound;

    printf("Enter the number of pages: ");
    scanf("%d", &n);

    printf("Enter the reference string: ");
    for (i = 0; i < n; i++) {
        scanf("%d", &referenceString[i]);
    }

    printf("Enter the number of frames: ");
    scanf("%d", &numFrames);

    // Initialize frames to -1 (empty)
    for (i = 0; i < numFrames; i++) {
        frames[i] = -1;
    }





    printf("\nPage Frames:\n");
    for (i = 0; i < n; i++) {
        pageFound = 0;

        // Check if the page is already in one of the frames
        for (j = 0; j < numFrames; j++) {
            if (frames[j] == referenceString[i]) {
                pageFound = 1;
                break;
            }
        }

        // If the page is not found, we need to replace a page
        if (!pageFound) {
            pageFaults++;

            // If there's an empty frame, use it
            if (i < numFrames) {
                frames[i] = referenceString[i];
            } else {
                // Find the index of the least recently used page
                int usage[MAX_FRAMES] = {0};

                for (j = 0; j < numFrames; j++) {
                    for (k = i - 1; k >= 0; k--) {
                        if (frames[j] == referenceString[k]) {
                            usage[j] = i - k;
                            break;
                        }
                    }
                }

                // Find the least recently used page
                leastUsedIndex = 0;
                for (j = 1; j < numFrames; j++) {
                    if (usage[j] > usage[leastUsedIndex]) {
                        leastUsedIndex = j;
                    }
                }

                // Replace the least recently used page
                frames[leastUsedIndex] = referenceString[i];
            }

            // Print current page frames
            for (j = 0; j < numFrames; j++) {
                printf("%d\t", frames[j]);
            }

printf("\n");
        }
    }

    printf("\nThe number of page faults is %d\n", pageFaults);

    return 0;
}



























2.	Write a program to implement Banker’s algorithm for Deadlock avoidance and prevention.

a.	Deadlock Avoidance

AIM: Simulate Banker’s Algorithm for Deadlock Avoidance to find whether the systemis insafe state or not.
ALGORITHM
Initialize arrays for processes and resources.
Input the number of processes and resources.
Enter maximum and allocated resources for each process.
Calculate the total available resources by subtracting allocated resources from the total.
Check for a safe sequence using the Banker's Algorithm.
Print the safe sequence if found; otherwise, indicate an unsafe state.
 End the program.


#include <stdio.h>

#define MAX_PROCESSES 10
#define MAX_RESOURCES 10

// Structure to hold process data
struct Process {
    int max[MAX_RESOURCES];  // Maximum resources needed by the process
    int allocated[MAX_RESOURCES];  // Resources currently allocated to the process
    int need[MAX_RESOURCES];  // Resources still needed by the process
};

// Function to check if the system is in a safe state
int isSafe(int processes, int resources, struct Process proc[], int available[]) {
    int work[MAX_RESOURCES];
    int finish[MAX_PROCESSES] = {0};
    int safeSeq[MAX_PROCESSES];
    int count = 0;

    // Initialize work with available resources
    for (int i = 0; i < resources; i++)
        work[i] = available[i];

    // Find a safe sequence
    while (count < processes) {
        int found = 0;
        for (int p = 0; p < processes; p++) {
            if (!finish[p]) {
                int j;
                for (j = 0; j < resources; j++)
                    if (proc[p].need[j] > work[j])
                        break;

                if (j == resources) {
                    for (int k = 0; k < resources; k++)
                        work[k] += proc[p].allocated[k];
                    
                    safeSeq[count++] = p;
                    finish[p] = 1;
                    found = 1;
                }
            }
        }


        if (!found)
            return 0;  // System is in an unsafe state
    }

    // Print the safe sequence
    printf("Safe sequence is: ");
    for (int i = 0; i < processes; i++)
        printf("P%d ", safeSeq[i]);
    printf("\n");

    return 1;  // System is in a safe state
}

int main() {
    int processes, resources;
    struct Process proc[MAX_PROCESSES];
    int available[MAX_RESOURCES];

    // Input number of processes
    printf("Enter the number of processes: ");
    scanf("%d", &processes);

    // Input number of resources
    printf("Enter the number of resources: ");
    scanf("%d", &resources);

    // Input maximum resources for each process
    for (int i = 0; i < processes; i++) {
        printf("Process P%d\n", i + 1);
        for (int j = 0; j < resources; j++) {
            printf("Max resources for R%d: ", j + 1);
            scanf("%d", &proc[i].max[j]);
        }
    }

    // Input allocated resources for each process
    for (int i = 0; i < processes; i++) {
        for (int j = 0; j < resources; j++) {
            printf("Allocated resources for R%d in P%d: ", j + 1, i + 1);
            scanf("%d", &proc[i].allocated[j]);
            proc[i].need[j] = proc[i].max[j] - proc[i].allocated[j];
        }
    }

    // Input total resources
    int total[MAX_RESOURCES];
    for (int i = 0; i < resources; i++) {
        printf("Total resources for R%d: ", i + 1);
        scanf("%d", &total[i]);
    }

    // Calculate available resources
    for (int i = 0; i < resources; i++) {
        int allocated = 0;
        for (int j = 0; j < processes; j++)
            allocated += proc[j].allocated[i];
        available[i] = total[i] - allocated;
    }

    // Check system state
    if (isSafe(processes, resources, proc, available))
        printf("The system is in a safe state.\n");
    else
        printf("The system is in an unsafe state.\n");

    return 0;
}




